name: Deploy JAM Construction Website

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        chmod 700 ~/.ssh
        
        # Debug: Check if key was written correctly (without revealing content)
        echo "SSH key file size: $(wc -c < ~/.ssh/id_rsa) bytes"
        echo "SSH key starts with: $(head -1 ~/.ssh/id_rsa)"
        
        # Add server to known hosts
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        echo "Known hosts added for ${{ secrets.SERVER_IP }}"
        
    - name: Deploy to server
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        # Debug: Check if secrets are available
        echo "SERVER_IP is set: $([[ -n '$SERVER_IP' ]] && echo 'YES' || echo 'NO')"
        echo "SERVER_USER is set: $([[ -n '$SERVER_USER' ]] && echo 'YES' || echo 'NO')"
        
        echo "üöÄ Starting deployment to $SERVER_USER@$SERVER_IP"
        
        # Test SSH connection with verbose output
        ssh -vvv -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=10 $SERVER_USER@$SERVER_IP 'echo "‚úÖ SSH connection successful"'
        
        # Upload files to server
        echo "üì§ Uploading files..."
        rsync -avz --progress --exclude='.git' --exclude='.github' --exclude='*.sh' --exclude='*.md' --exclude='node_modules' -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" ./ $SERVER_USER@$SERVER_IP:/home/opc/website-update/
        
        # Deploy on server
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'EOF'
          # Create backup
          BACKUP_NAME="website-backup-$(date +%Y%m%d-%H%M%S)"
          sudo cp -r /var/www/html /home/opc/$BACKUP_NAME
          sudo chown -R opc:opc /home/opc/$BACKUP_NAME
          
          # Deploy new files
          sudo cp -r /home/opc/website-update/* /var/www/html/
          
          # Set proper permissions
          WEB_USER=$(ps aux | grep -E '(httpd|apache2)' | grep -v grep | head -1 | awk '{print $1}' || echo "apache")
          if [ "$WEB_USER" = "root" ]; then
            WEB_USER="apache"
          fi
          sudo chown -R $WEB_USER:$WEB_USER /var/www/html/
          sudo chmod -R 755 /var/www/html/
          
          # Set SELinux context if needed
          if command -v restorecon >/dev/null 2>&1; then
            sudo restorecon -Rv /var/www/html/
          fi
          
          # Clean up
          rm -rf /home/opc/website-update
          
          # Restart Apache
          sudo systemctl reload httpd
          
          echo "Deployment completed successfully!"
          echo "Backup created: $BACKUP_NAME"
        EOF
        
    - name: Verify deployment
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
      run: |
        # Test if site is responding
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$SERVER_IP)
        if [ "$RESPONSE" = "200" ]; then
          echo "‚úÖ Website is responding correctly (HTTP $RESPONSE)"
        else
          echo "‚ùå Website returned HTTP $RESPONSE"
          exit 1
        fi